/**
 */
package SistemaEncuestas.provider;

import SistemaEncuestas.util.SistemaEncuestasAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SistemaEncuestasItemProviderAdapterFactory extends SistemaEncuestasAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SistemaEncuestasItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Encuesta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EncuestaItemProvider encuestaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Encuesta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEncuestaAdapter() {
		if (encuestaItemProvider == null) {
			encuestaItemProvider = new EncuestaItemProvider(this);
		}

		return encuestaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Modulo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuloItemProvider moduloItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Modulo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuloAdapter() {
		if (moduloItemProvider == null) {
			moduloItemProvider = new ModuloItemProvider(this);
		}

		return moduloItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Fin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinItemProvider finItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Fin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinAdapter() {
		if (finItemProvider == null) {
			finItemProvider = new FinItemProvider(this);
		}

		return finItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.SaltoRespuesta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaltoRespuestaItemProvider saltoRespuestaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.SaltoRespuesta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaltoRespuestaAdapter() {
		if (saltoRespuestaItemProvider == null) {
			saltoRespuestaItemProvider = new SaltoRespuestaItemProvider(this);
		}

		return saltoRespuestaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Pregunta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreguntaItemProvider preguntaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Pregunta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreguntaAdapter() {
		if (preguntaItemProvider == null) {
			preguntaItemProvider = new PreguntaItemProvider(this);
		}

		return preguntaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Respuesta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RespuestaItemProvider respuestaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Respuesta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRespuestaAdapter() {
		if (respuestaItemProvider == null) {
			respuestaItemProvider = new RespuestaItemProvider(this);
		}

		return respuestaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.Inicio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InicioItemProvider inicioItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.Inicio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInicioAdapter() {
		if (inicioItemProvider == null) {
			inicioItemProvider = new InicioItemProvider(this);
		}

		return inicioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.SaltoInicio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaltoInicioItemProvider saltoInicioItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.SaltoInicio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaltoInicioAdapter() {
		if (saltoInicioItemProvider == null) {
			saltoInicioItemProvider = new SaltoInicioItemProvider(this);
		}

		return saltoInicioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.SaltoPregunta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaltoPreguntaItemProvider saltoPreguntaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.SaltoPregunta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaltoPreguntaAdapter() {
		if (saltoPreguntaItemProvider == null) {
			saltoPreguntaItemProvider = new SaltoPreguntaItemProvider(this);
		}

		return saltoPreguntaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.SaltoFinRespuesta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaltoFinRespuestaItemProvider saltoFinRespuestaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.SaltoFinRespuesta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaltoFinRespuestaAdapter() {
		if (saltoFinRespuestaItemProvider == null) {
			saltoFinRespuestaItemProvider = new SaltoFinRespuestaItemProvider(this);
		}

		return saltoFinRespuestaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link SistemaEncuestas.SaltoFinPregunta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaltoFinPreguntaItemProvider saltoFinPreguntaItemProvider;

	/**
	 * This creates an adapter for a {@link SistemaEncuestas.SaltoFinPregunta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaltoFinPreguntaAdapter() {
		if (saltoFinPreguntaItemProvider == null) {
			saltoFinPreguntaItemProvider = new SaltoFinPreguntaItemProvider(this);
		}

		return saltoFinPreguntaItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (encuestaItemProvider != null) encuestaItemProvider.dispose();
		if (moduloItemProvider != null) moduloItemProvider.dispose();
		if (finItemProvider != null) finItemProvider.dispose();
		if (saltoRespuestaItemProvider != null) saltoRespuestaItemProvider.dispose();
		if (preguntaItemProvider != null) preguntaItemProvider.dispose();
		if (respuestaItemProvider != null) respuestaItemProvider.dispose();
		if (inicioItemProvider != null) inicioItemProvider.dispose();
		if (saltoInicioItemProvider != null) saltoInicioItemProvider.dispose();
		if (saltoPreguntaItemProvider != null) saltoPreguntaItemProvider.dispose();
		if (saltoFinRespuestaItemProvider != null) saltoFinRespuestaItemProvider.dispose();
		if (saltoFinPreguntaItemProvider != null) saltoFinPreguntaItemProvider.dispose();
	}

}
